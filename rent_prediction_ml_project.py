# -*- coding: utf-8 -*-
"""rent_prediction_ml_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19h4qzbf9fJKamkaZmjI09uuY1mTRVzvz

Öncelikle kütüphanelerimizi dahil ettik.
"""

from google.colab import files
import io
import pandas as pd

"""Veri setimizi ekledik."""

uploaded = files.upload()

"""Yüklenen CSV dosyasını okuyup DataFrame oluşturduk."""

df = pd.read_csv(io.BytesIO(uploaded['train.csv']))

print(df.head()) #ilk 5 satır

print(df.info())

print(df.describe())

zero_area_count = (df['area'] == 0).sum()
print(f"'area' sütununda sıfır olan kayıt sayısı: {zero_area_count}") #veri temizleme aşamasında bazı kısımlara göz atalım

df_encoded = pd.get_dummies(df, drop_first=True)

X = df_encoded.drop('rent', axis=1)
y = df_encoded['rent']

""" Area sütununda sıfır olanları, sıfır olmayanların ortalamasıyla doldurduk.Çünkü çok fazla satır sıfırdı ve eğer silseydik de verimli olmazdı."""

area_mean = df.loc[df['area'] > 0, 'area'].mean()
df.loc[df['area'] == 0, 'area'] = area_mean

print(f"Yeni area ortalaması: {df['area'].mean()}")
print(f"Area'da sıfır kalan kayıt sayısı: {(df['area'] == 0).sum()}")

"""Bedroom ve Bathrooms için üst sınır 8 koyduk. %99 üst sınırlarını hesapladık."""

rent_upper = df['rent'].quantile(0.99)
area_upper = df['area'].quantile(0.99)


df_cleaned = df[(df['rent'] <= rent_upper) &
                (df['area'] <= area_upper) &
                (df['bedroom'] <= 8) &
                (df['bathrooms'] <= 8)]

print(f"Temizlendikten sonra veri sayısı: {len(df_cleaned)}")

df_cleaned.loc[:, 'wheelchairadption'] = df_cleaned['wheelchairadption'].fillna('No') # 'wheelchairadption' sütunundaki boşları 'No' ile doldurduk
df_cleaned.loc[:, 'petfacility'] = df_cleaned['petfacility'].fillna('No') # 'petfacility' sütunundaki boşları 'No' ile doldurduk

#Kategorik sütunları seçtik
#Bunları sayısal hale dönüştürmek için one-hot encoding uyguladık
cat_cols = ['furnishing', 'avalable_for', 'floor_type', 'gate_community', 'corner_pro',
            'wheelchairadption', 'petfacility', 'propertyage', 'facing']  # Veri setindeki kategorik değişkenler

# Kategorik sütunları one-hot encoding yöntemiyle sayısal hale getiriyoruz
df_encoded = pd.get_dummies(df_cleaned, columns=cat_cols, drop_first=True) #“Bazı sütunlar birbirini tamamen tahmin ediyorsa, bu fazladan karmaşıklık yaratır. drop_first=True ile o fazlalığı kaldırıyoruz.”

print(f"Yeni veri seti boyutu: {df_encoded.shape}") # Satır ve sütun sayısını gösteriyoruz.

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

y = df_encoded['rent']
#Bu satırda y değişkenine "rent" sütunundaki kira fiyatlarını atıyoruz.
#Yani modelimizin tahmin etmeye çalışacağı hedef değişken kira fiyatı oluyor.

X = df_encoded.drop('rent', axis=1)
#Burada X değişkenine ise veri setimizdeki rent hariç tüm diğer sütunları koyuyoruz.
#Yani modelimizin kullanacağı özellikler olarak kira fiyatı dışındaki tüm bilgiler seçiliyor.

X.select_dtypes(include='object').columns

X = X.drop(columns=['address'])

import re

def extract_amount(x):
    if isinstance(x, str):
        match = re.search(r'\d+', x)  # string içindeki ilk sayı
        if match:
            return float(match.group())
    return 0.0  # eğer sayı yoksa 0 döndür

X['maintenance_amt'] = X['maintenance_amt'].apply(extract_amount)

cat_cols = X.select_dtypes(include='object').columns
X = pd.get_dummies(X, columns=cat_cols, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

y_pred = lr_model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")

"""ŞİMDİ RANDOM FOREST İLE BİR MODEL DENEYELİM"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
import numpy as np

# Modeli oluştur
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

rf_preds = rf_model.predict(X_test)

rf_rmse = np.sqrt(mean_squared_error(y_test, rf_preds))
rf_mape = mean_absolute_percentage_error(y_test, rf_preds)

print(f"Random Forest RMSE: {rf_rmse}")
print(f"Random Forest MAPE: {rf_mape}")

!pip install xgboost

import xgboost

from xgboost import XGBRegressor

# Modeli oluştur
xgb_model = XGBRegressor(random_state=42)
xgb_model.fit(X_train, y_train)

# Tahmin yap
xgb_preds = xgb_model.predict(X_test)

# Değerlendirme
xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_preds))
xgb_mape = mean_absolute_percentage_error(y_test, xgb_preds)

print(f"XGBoost RMSE: {xgb_rmse}")
print(f"XGBoost MAPE: {xgb_mape}")

import joblib

# Modeli kaydet
joblib.dump(xgb_model, 'xgboost_model.joblib')

# XGBoost modeli yeniden eğit
from xgboost import XGBRegressor
xgb_model = XGBRegressor()
xgb_model.fit(X_train, y_train)

# Kaydet
import joblib
joblib.dump(xgb_model, 'xgboost_model.joblib')

import joblib

# Modeli yükle
model = joblib.load('xgboost_model.joblib')

# Artık model ile tahmin yapabilirsiniz
# Örneğin:
# y_pred = model.predict(X_test)

import pandas as pd

# sample = tahmin yapmak istediğin yeni veri (tek satır DataFrame veya dict'ten oluşturulmuş DataFrame)
sample = pd.DataFrame([{
    'bedroom': 2,
    'bathrooms': 2,
    'area': 1050,
    'furnishing': 'Unfurnished',
    'available_for': 'All',
    'address': 'Sadguru hights, Pingale Wasti, , Pune, Maharashtra',
    'floor_number': 5,
    'facing': 'West',
    'floor_type': 'Marble',
    'gate_community': 'Yes',
    'corner_pro': 'No',
    'parking': 0,
    'wheelchairadoption': 'None',
    'petfacility': None,
    'aggDur': 11,
    'noticeDur': 2,
    'lightbill': 0,
    'powerbackup': 2,
    'propertyage': '5 to 10 Year Old',
    'no_room': 1,
    'pooja_room': 0,
    'study_room': 0,
    'others': 0,
    'servant_room': 0,
    'store_room': 0,
    'maintenance_amt': 3,
    'brok_amt': 0,
    'deposit_amt': 0,
    'mnt_amt': 0
}])

# Eğer 'address' gibi çok değişkenli metin modelde kullanılmıyorsa çıkar
sample = sample.drop(columns=['address'])

# 1. One-hot encode et (modelde kullanılanla aynı şekilde)
sample_encoded = pd.get_dummies(sample)

# 2. Modeldeki tüm sütunlar (X) ile aynı olacak şekilde eksik sütunları doldur
for col in X.columns:
    if col not in sample_encoded.columns:
        sample_encoded[col] = 0

# 3. Sütun sırasını model eğitimindeki X ile eşitle
sample_encoded = sample_encoded[X.columns]

# 4. Tahmin yap
predicted_rent = model.predict(sample_encoded)
print(f"Tahmin edilen kira: ₹{predicted_rent[0]:,.2f}");

# Sadece sayısal sütunları seç
numeric_df = df.select_dtypes(include=['number'])

# Korelasyon matrisi çiz
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm")
plt.title("Sayısal Özellikler Arasındaki Korelasyon")
plt.show()

from sklearn.metrics import mean_squared_error
import numpy as np

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE:", rmse)

from sklearn.metrics import mean_absolute_percentage_error

mape = mean_absolute_percentage_error(y_test, y_pred)
print("MAPE:", mape)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred)
print("R2 Skoru:", r2)

"""### Model Performans Değerlendirmesi

Modelin test verisi üzerindeki hata metrikleri:

- **Root Mean Squared Error (RMSE):** 5094.30
- **Mean Absolute Percentage Error (MAPE):** %26.1

Bu sonuçlara göre modelin kira tahminlerinde ortalama sapması %26.1 civarındadır. RMSE değeri ise yaklaşık 5.094 TL'dir. Bu, modelin tahminlerinin gerçek değerlerden belirli bir oranda saptığını gösterir. Modelin performansı temel düzeyde kabul edilebilir olsa da, öznitelik mühendisliği, hiperparametre optimizasyonu ve daha gelişmiş modellerle doğruluk artırılabilir.

"""

